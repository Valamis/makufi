/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package fi.valamis.maakportal2.calendar.event.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import fi.valamis.maakportal2.calendar.event.model.Event;
import fi.valamis.maakportal2.calendar.event.model.EventModel;
import fi.valamis.maakportal2.calendar.event.model.EventSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Event service. Represents a row in the &quot;Calendar_Event&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EventModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EventImpl
 * @see Event
 * @see EventModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EventModelImpl extends BaseModelImpl<Event> implements EventModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a event model instance should use the {@link Event} interface instead.
	 */
	public static final String TABLE_NAME = "Calendar_Event";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "eventId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "eventName", Types.VARCHAR },
			{ "startingDate", Types.TIMESTAMP },
			{ "endingDate", Types.TIMESTAMP },
			{ "timesAdditionalInfo", Types.VARCHAR },
			{ "location", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "imageUrl", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "additionalInformation", Types.VARCHAR },
			{ "signUpLink", Types.VARCHAR },
			{ "linkToEventWebPage", Types.VARCHAR },
			{ "categoryIds", Types.VARCHAR },
			{ "eventAuthorName", Types.VARCHAR },
			{ "eventAuthorEmail", Types.VARCHAR },
			{ "eventAuthorPhoneNumber", Types.VARCHAR },
			{ "additionalCompanyIds", Types.VARCHAR },
			{ "status", Types.VARCHAR },
			{ "authorizationToken", Types.VARCHAR },
			{ "userGivenPassword", Types.VARCHAR },
			{ "adminComment", Types.VARCHAR },
			{ "showMap", Types.BOOLEAN },
			{ "updateUrl", Types.VARCHAR },
			{ "eventFriendlyName", Types.VARCHAR },
			{ "additionalStartingDates", Types.VARCHAR },
			{ "additionalStartingDatesRule", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("eventName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startingDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endingDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("timesAdditionalInfo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("additionalInformation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signUpLink", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("linkToEventWebPage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoryIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventAuthorName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventAuthorEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventAuthorPhoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("additionalCompanyIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorizationToken", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userGivenPassword", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("adminComment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("showMap", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("updateUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventFriendlyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("additionalStartingDates", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("additionalStartingDatesRule", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table Calendar_Event (uuid_ VARCHAR(75) null,eventId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,eventName VARCHAR(1000) null,startingDate DATE null,endingDate DATE null,timesAdditionalInfo STRING null,location VARCHAR(75) null,address VARCHAR(1000) null,imageUrl VARCHAR(1000) null,description STRING null,additionalInformation STRING null,signUpLink VARCHAR(1000) null,linkToEventWebPage VARCHAR(1000) null,categoryIds VARCHAR(75) null,eventAuthorName VARCHAR(75) null,eventAuthorEmail VARCHAR(75) null,eventAuthorPhoneNumber VARCHAR(75) null,additionalCompanyIds VARCHAR(500) null,status VARCHAR(75) null,authorizationToken VARCHAR(75) null,userGivenPassword VARCHAR(75) null,adminComment STRING null,showMap BOOLEAN,updateUrl VARCHAR(1000) null,eventFriendlyName VARCHAR(1000) null,additionalStartingDates STRING null,additionalStartingDatesRule VARCHAR(300) null)";
	public static final String TABLE_SQL_DROP = "drop table Calendar_Event";
	public static final String ORDER_BY_JPQL = " ORDER BY event.startingDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Calendar_Event.startingDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(fi.valamis.maakportal2.calendar.event.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.fi.valamis.maakportal2.calendar.event.model.Event"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(fi.valamis.maakportal2.calendar.event.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.fi.valamis.maakportal2.calendar.event.model.Event"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(fi.valamis.maakportal2.calendar.event.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.fi.valamis.maakportal2.calendar.event.model.Event"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long ENDINGDATE_COLUMN_BITMASK = 2L;
	public static final long EVENTFRIENDLYNAME_COLUMN_BITMASK = 4L;
	public static final long GROUPID_COLUMN_BITMASK = 8L;
	public static final long STARTINGDATE_COLUMN_BITMASK = 16L;
	public static final long STATUS_COLUMN_BITMASK = 32L;
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Event toModel(EventSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Event model = new EventImpl();

		model.setUuid(soapModel.getUuid());
		model.setEventId(soapModel.getEventId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setEventName(soapModel.getEventName());
		model.setStartingDate(soapModel.getStartingDate());
		model.setEndingDate(soapModel.getEndingDate());
		model.setTimesAdditionalInfo(soapModel.getTimesAdditionalInfo());
		model.setLocation(soapModel.getLocation());
		model.setAddress(soapModel.getAddress());
		model.setImageUrl(soapModel.getImageUrl());
		model.setDescription(soapModel.getDescription());
		model.setAdditionalInformation(soapModel.getAdditionalInformation());
		model.setSignUpLink(soapModel.getSignUpLink());
		model.setLinkToEventWebPage(soapModel.getLinkToEventWebPage());
		model.setCategoryIds(soapModel.getCategoryIds());
		model.setEventAuthorName(soapModel.getEventAuthorName());
		model.setEventAuthorEmail(soapModel.getEventAuthorEmail());
		model.setEventAuthorPhoneNumber(soapModel.getEventAuthorPhoneNumber());
		model.setAdditionalCompanyIds(soapModel.getAdditionalCompanyIds());
		model.setStatus(soapModel.getStatus());
		model.setAuthorizationToken(soapModel.getAuthorizationToken());
		model.setUserGivenPassword(soapModel.getUserGivenPassword());
		model.setAdminComment(soapModel.getAdminComment());
		model.setShowMap(soapModel.getShowMap());
		model.setUpdateUrl(soapModel.getUpdateUrl());
		model.setEventFriendlyName(soapModel.getEventFriendlyName());
		model.setAdditionalStartingDates(soapModel.getAdditionalStartingDates());
		model.setAdditionalStartingDatesRule(soapModel.getAdditionalStartingDatesRule());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Event> toModels(EventSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Event> models = new ArrayList<Event>(soapModels.length);

		for (EventSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(fi.valamis.maakportal2.calendar.event.service.util.ServiceProps.get(
				"lock.expiration.time.fi.valamis.maakportal2.calendar.event.model.Event"));

	public EventModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Event.class;
	}

	@Override
	public String getModelClassName() {
		return Event.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("eventId", getEventId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("eventName", getEventName());
		attributes.put("startingDate", getStartingDate());
		attributes.put("endingDate", getEndingDate());
		attributes.put("timesAdditionalInfo", getTimesAdditionalInfo());
		attributes.put("location", getLocation());
		attributes.put("address", getAddress());
		attributes.put("imageUrl", getImageUrl());
		attributes.put("description", getDescription());
		attributes.put("additionalInformation", getAdditionalInformation());
		attributes.put("signUpLink", getSignUpLink());
		attributes.put("linkToEventWebPage", getLinkToEventWebPage());
		attributes.put("categoryIds", getCategoryIds());
		attributes.put("eventAuthorName", getEventAuthorName());
		attributes.put("eventAuthorEmail", getEventAuthorEmail());
		attributes.put("eventAuthorPhoneNumber", getEventAuthorPhoneNumber());
		attributes.put("additionalCompanyIds", getAdditionalCompanyIds());
		attributes.put("status", getStatus());
		attributes.put("authorizationToken", getAuthorizationToken());
		attributes.put("userGivenPassword", getUserGivenPassword());
		attributes.put("adminComment", getAdminComment());
		attributes.put("showMap", getShowMap());
		attributes.put("updateUrl", getUpdateUrl());
		attributes.put("eventFriendlyName", getEventFriendlyName());
		attributes.put("additionalStartingDates", getAdditionalStartingDates());
		attributes.put("additionalStartingDatesRule",
			getAdditionalStartingDatesRule());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long eventId = (Long)attributes.get("eventId");

		if (eventId != null) {
			setEventId(eventId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String eventName = (String)attributes.get("eventName");

		if (eventName != null) {
			setEventName(eventName);
		}

		Date startingDate = (Date)attributes.get("startingDate");

		if (startingDate != null) {
			setStartingDate(startingDate);
		}

		Date endingDate = (Date)attributes.get("endingDate");

		if (endingDate != null) {
			setEndingDate(endingDate);
		}

		String timesAdditionalInfo = (String)attributes.get(
				"timesAdditionalInfo");

		if (timesAdditionalInfo != null) {
			setTimesAdditionalInfo(timesAdditionalInfo);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String imageUrl = (String)attributes.get("imageUrl");

		if (imageUrl != null) {
			setImageUrl(imageUrl);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String additionalInformation = (String)attributes.get(
				"additionalInformation");

		if (additionalInformation != null) {
			setAdditionalInformation(additionalInformation);
		}

		String signUpLink = (String)attributes.get("signUpLink");

		if (signUpLink != null) {
			setSignUpLink(signUpLink);
		}

		String linkToEventWebPage = (String)attributes.get("linkToEventWebPage");

		if (linkToEventWebPage != null) {
			setLinkToEventWebPage(linkToEventWebPage);
		}

		String categoryIds = (String)attributes.get("categoryIds");

		if (categoryIds != null) {
			setCategoryIds(categoryIds);
		}

		String eventAuthorName = (String)attributes.get("eventAuthorName");

		if (eventAuthorName != null) {
			setEventAuthorName(eventAuthorName);
		}

		String eventAuthorEmail = (String)attributes.get("eventAuthorEmail");

		if (eventAuthorEmail != null) {
			setEventAuthorEmail(eventAuthorEmail);
		}

		String eventAuthorPhoneNumber = (String)attributes.get(
				"eventAuthorPhoneNumber");

		if (eventAuthorPhoneNumber != null) {
			setEventAuthorPhoneNumber(eventAuthorPhoneNumber);
		}

		String additionalCompanyIds = (String)attributes.get(
				"additionalCompanyIds");

		if (additionalCompanyIds != null) {
			setAdditionalCompanyIds(additionalCompanyIds);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String authorizationToken = (String)attributes.get("authorizationToken");

		if (authorizationToken != null) {
			setAuthorizationToken(authorizationToken);
		}

		String userGivenPassword = (String)attributes.get("userGivenPassword");

		if (userGivenPassword != null) {
			setUserGivenPassword(userGivenPassword);
		}

		String adminComment = (String)attributes.get("adminComment");

		if (adminComment != null) {
			setAdminComment(adminComment);
		}

		Boolean showMap = (Boolean)attributes.get("showMap");

		if (showMap != null) {
			setShowMap(showMap);
		}

		String updateUrl = (String)attributes.get("updateUrl");

		if (updateUrl != null) {
			setUpdateUrl(updateUrl);
		}

		String eventFriendlyName = (String)attributes.get("eventFriendlyName");

		if (eventFriendlyName != null) {
			setEventFriendlyName(eventFriendlyName);
		}

		String additionalStartingDates = (String)attributes.get(
				"additionalStartingDates");

		if (additionalStartingDates != null) {
			setAdditionalStartingDates(additionalStartingDates);
		}

		String additionalStartingDatesRule = (String)attributes.get(
				"additionalStartingDatesRule");

		if (additionalStartingDatesRule != null) {
			setAdditionalStartingDatesRule(additionalStartingDatesRule);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		_eventId = eventId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getEventName() {
		if (_eventName == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventName;
		}
	}

	@Override
	public void setEventName(String eventName) {
		_eventName = eventName;
	}

	@JSON
	@Override
	public Date getStartingDate() {
		return _startingDate;
	}

	@Override
	public void setStartingDate(Date startingDate) {
		_columnBitmask = -1L;

		if (_originalStartingDate == null) {
			_originalStartingDate = _startingDate;
		}

		_startingDate = startingDate;
	}

	public Date getOriginalStartingDate() {
		return _originalStartingDate;
	}

	@JSON
	@Override
	public Date getEndingDate() {
		return _endingDate;
	}

	@Override
	public void setEndingDate(Date endingDate) {
		_columnBitmask |= ENDINGDATE_COLUMN_BITMASK;

		if (_originalEndingDate == null) {
			_originalEndingDate = _endingDate;
		}

		_endingDate = endingDate;
	}

	public Date getOriginalEndingDate() {
		return _originalEndingDate;
	}

	@JSON
	@Override
	public String getTimesAdditionalInfo() {
		if (_timesAdditionalInfo == null) {
			return StringPool.BLANK;
		}
		else {
			return _timesAdditionalInfo;
		}
	}

	@Override
	public void setTimesAdditionalInfo(String timesAdditionalInfo) {
		_timesAdditionalInfo = timesAdditionalInfo;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	@Override
	public String getImageUrl() {
		if (_imageUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageUrl;
		}
	}

	@Override
	public void setImageUrl(String imageUrl) {
		_imageUrl = imageUrl;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getAdditionalInformation() {
		if (_additionalInformation == null) {
			return StringPool.BLANK;
		}
		else {
			return _additionalInformation;
		}
	}

	@Override
	public void setAdditionalInformation(String additionalInformation) {
		_additionalInformation = additionalInformation;
	}

	@JSON
	@Override
	public String getSignUpLink() {
		if (_signUpLink == null) {
			return StringPool.BLANK;
		}
		else {
			return _signUpLink;
		}
	}

	@Override
	public void setSignUpLink(String signUpLink) {
		_signUpLink = signUpLink;
	}

	@JSON
	@Override
	public String getLinkToEventWebPage() {
		if (_linkToEventWebPage == null) {
			return StringPool.BLANK;
		}
		else {
			return _linkToEventWebPage;
		}
	}

	@Override
	public void setLinkToEventWebPage(String linkToEventWebPage) {
		_linkToEventWebPage = linkToEventWebPage;
	}

	@JSON
	@Override
	public String getCategoryIds() {
		if (_categoryIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryIds;
		}
	}

	@Override
	public void setCategoryIds(String categoryIds) {
		_categoryIds = categoryIds;
	}

	@JSON
	@Override
	public String getEventAuthorName() {
		if (_eventAuthorName == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventAuthorName;
		}
	}

	@Override
	public void setEventAuthorName(String eventAuthorName) {
		_eventAuthorName = eventAuthorName;
	}

	@JSON
	@Override
	public String getEventAuthorEmail() {
		if (_eventAuthorEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventAuthorEmail;
		}
	}

	@Override
	public void setEventAuthorEmail(String eventAuthorEmail) {
		_eventAuthorEmail = eventAuthorEmail;
	}

	@JSON
	@Override
	public String getEventAuthorPhoneNumber() {
		if (_eventAuthorPhoneNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventAuthorPhoneNumber;
		}
	}

	@Override
	public void setEventAuthorPhoneNumber(String eventAuthorPhoneNumber) {
		_eventAuthorPhoneNumber = eventAuthorPhoneNumber;
	}

	@JSON
	@Override
	public String getAdditionalCompanyIds() {
		if (_additionalCompanyIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _additionalCompanyIds;
		}
	}

	@Override
	public void setAdditionalCompanyIds(String additionalCompanyIds) {
		_additionalCompanyIds = additionalCompanyIds;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	@JSON
	@Override
	public String getAuthorizationToken() {
		if (_authorizationToken == null) {
			return StringPool.BLANK;
		}
		else {
			return _authorizationToken;
		}
	}

	@Override
	public void setAuthorizationToken(String authorizationToken) {
		_authorizationToken = authorizationToken;
	}

	@JSON
	@Override
	public String getUserGivenPassword() {
		if (_userGivenPassword == null) {
			return StringPool.BLANK;
		}
		else {
			return _userGivenPassword;
		}
	}

	@Override
	public void setUserGivenPassword(String userGivenPassword) {
		_userGivenPassword = userGivenPassword;
	}

	@JSON
	@Override
	public String getAdminComment() {
		if (_adminComment == null) {
			return StringPool.BLANK;
		}
		else {
			return _adminComment;
		}
	}

	@Override
	public void setAdminComment(String adminComment) {
		_adminComment = adminComment;
	}

	@JSON
	@Override
	public boolean getShowMap() {
		return _showMap;
	}

	@JSON
	@Override
	public boolean isShowMap() {
		return _showMap;
	}

	@Override
	public void setShowMap(boolean showMap) {
		_showMap = showMap;
	}

	@JSON
	@Override
	public String getUpdateUrl() {
		if (_updateUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _updateUrl;
		}
	}

	@Override
	public void setUpdateUrl(String updateUrl) {
		_updateUrl = updateUrl;
	}

	@JSON
	@Override
	public String getEventFriendlyName() {
		if (_eventFriendlyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventFriendlyName;
		}
	}

	@Override
	public void setEventFriendlyName(String eventFriendlyName) {
		_columnBitmask |= EVENTFRIENDLYNAME_COLUMN_BITMASK;

		if (_originalEventFriendlyName == null) {
			_originalEventFriendlyName = _eventFriendlyName;
		}

		_eventFriendlyName = eventFriendlyName;
	}

	public String getOriginalEventFriendlyName() {
		return GetterUtil.getString(_originalEventFriendlyName);
	}

	@JSON
	@Override
	public String getAdditionalStartingDates() {
		if (_additionalStartingDates == null) {
			return StringPool.BLANK;
		}
		else {
			return _additionalStartingDates;
		}
	}

	@Override
	public void setAdditionalStartingDates(String additionalStartingDates) {
		_additionalStartingDates = additionalStartingDates;
	}

	@JSON
	@Override
	public String getAdditionalStartingDatesRule() {
		if (_additionalStartingDatesRule == null) {
			return StringPool.BLANK;
		}
		else {
			return _additionalStartingDatesRule;
		}
	}

	@Override
	public void setAdditionalStartingDatesRule(
		String additionalStartingDatesRule) {
		_additionalStartingDatesRule = additionalStartingDatesRule;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Event.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Event.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Event toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Event)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EventImpl eventImpl = new EventImpl();

		eventImpl.setUuid(getUuid());
		eventImpl.setEventId(getEventId());
		eventImpl.setGroupId(getGroupId());
		eventImpl.setCompanyId(getCompanyId());
		eventImpl.setCreateDate(getCreateDate());
		eventImpl.setModifiedDate(getModifiedDate());
		eventImpl.setEventName(getEventName());
		eventImpl.setStartingDate(getStartingDate());
		eventImpl.setEndingDate(getEndingDate());
		eventImpl.setTimesAdditionalInfo(getTimesAdditionalInfo());
		eventImpl.setLocation(getLocation());
		eventImpl.setAddress(getAddress());
		eventImpl.setImageUrl(getImageUrl());
		eventImpl.setDescription(getDescription());
		eventImpl.setAdditionalInformation(getAdditionalInformation());
		eventImpl.setSignUpLink(getSignUpLink());
		eventImpl.setLinkToEventWebPage(getLinkToEventWebPage());
		eventImpl.setCategoryIds(getCategoryIds());
		eventImpl.setEventAuthorName(getEventAuthorName());
		eventImpl.setEventAuthorEmail(getEventAuthorEmail());
		eventImpl.setEventAuthorPhoneNumber(getEventAuthorPhoneNumber());
		eventImpl.setAdditionalCompanyIds(getAdditionalCompanyIds());
		eventImpl.setStatus(getStatus());
		eventImpl.setAuthorizationToken(getAuthorizationToken());
		eventImpl.setUserGivenPassword(getUserGivenPassword());
		eventImpl.setAdminComment(getAdminComment());
		eventImpl.setShowMap(getShowMap());
		eventImpl.setUpdateUrl(getUpdateUrl());
		eventImpl.setEventFriendlyName(getEventFriendlyName());
		eventImpl.setAdditionalStartingDates(getAdditionalStartingDates());
		eventImpl.setAdditionalStartingDatesRule(getAdditionalStartingDatesRule());

		eventImpl.resetOriginalValues();

		return eventImpl;
	}

	@Override
	public int compareTo(Event event) {
		int value = 0;

		value = DateUtil.compareTo(getStartingDate(), event.getStartingDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Event)) {
			return false;
		}

		Event event = (Event)obj;

		long primaryKey = event.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EventModelImpl eventModelImpl = this;

		eventModelImpl._originalUuid = eventModelImpl._uuid;

		eventModelImpl._originalGroupId = eventModelImpl._groupId;

		eventModelImpl._setOriginalGroupId = false;

		eventModelImpl._originalCompanyId = eventModelImpl._companyId;

		eventModelImpl._setOriginalCompanyId = false;

		eventModelImpl._setModifiedDate = false;

		eventModelImpl._originalStartingDate = eventModelImpl._startingDate;

		eventModelImpl._originalEndingDate = eventModelImpl._endingDate;

		eventModelImpl._originalStatus = eventModelImpl._status;

		eventModelImpl._originalEventFriendlyName = eventModelImpl._eventFriendlyName;

		eventModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Event> toCacheModel() {
		EventCacheModel eventCacheModel = new EventCacheModel();

		eventCacheModel.uuid = getUuid();

		String uuid = eventCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			eventCacheModel.uuid = null;
		}

		eventCacheModel.eventId = getEventId();

		eventCacheModel.groupId = getGroupId();

		eventCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			eventCacheModel.createDate = createDate.getTime();
		}
		else {
			eventCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			eventCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			eventCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		eventCacheModel.eventName = getEventName();

		String eventName = eventCacheModel.eventName;

		if ((eventName != null) && (eventName.length() == 0)) {
			eventCacheModel.eventName = null;
		}

		Date startingDate = getStartingDate();

		if (startingDate != null) {
			eventCacheModel.startingDate = startingDate.getTime();
		}
		else {
			eventCacheModel.startingDate = Long.MIN_VALUE;
		}

		Date endingDate = getEndingDate();

		if (endingDate != null) {
			eventCacheModel.endingDate = endingDate.getTime();
		}
		else {
			eventCacheModel.endingDate = Long.MIN_VALUE;
		}

		eventCacheModel.timesAdditionalInfo = getTimesAdditionalInfo();

		String timesAdditionalInfo = eventCacheModel.timesAdditionalInfo;

		if ((timesAdditionalInfo != null) &&
				(timesAdditionalInfo.length() == 0)) {
			eventCacheModel.timesAdditionalInfo = null;
		}

		eventCacheModel.location = getLocation();

		String location = eventCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			eventCacheModel.location = null;
		}

		eventCacheModel.address = getAddress();

		String address = eventCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			eventCacheModel.address = null;
		}

		eventCacheModel.imageUrl = getImageUrl();

		String imageUrl = eventCacheModel.imageUrl;

		if ((imageUrl != null) && (imageUrl.length() == 0)) {
			eventCacheModel.imageUrl = null;
		}

		eventCacheModel.description = getDescription();

		String description = eventCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			eventCacheModel.description = null;
		}

		eventCacheModel.additionalInformation = getAdditionalInformation();

		String additionalInformation = eventCacheModel.additionalInformation;

		if ((additionalInformation != null) &&
				(additionalInformation.length() == 0)) {
			eventCacheModel.additionalInformation = null;
		}

		eventCacheModel.signUpLink = getSignUpLink();

		String signUpLink = eventCacheModel.signUpLink;

		if ((signUpLink != null) && (signUpLink.length() == 0)) {
			eventCacheModel.signUpLink = null;
		}

		eventCacheModel.linkToEventWebPage = getLinkToEventWebPage();

		String linkToEventWebPage = eventCacheModel.linkToEventWebPage;

		if ((linkToEventWebPage != null) && (linkToEventWebPage.length() == 0)) {
			eventCacheModel.linkToEventWebPage = null;
		}

		eventCacheModel.categoryIds = getCategoryIds();

		String categoryIds = eventCacheModel.categoryIds;

		if ((categoryIds != null) && (categoryIds.length() == 0)) {
			eventCacheModel.categoryIds = null;
		}

		eventCacheModel.eventAuthorName = getEventAuthorName();

		String eventAuthorName = eventCacheModel.eventAuthorName;

		if ((eventAuthorName != null) && (eventAuthorName.length() == 0)) {
			eventCacheModel.eventAuthorName = null;
		}

		eventCacheModel.eventAuthorEmail = getEventAuthorEmail();

		String eventAuthorEmail = eventCacheModel.eventAuthorEmail;

		if ((eventAuthorEmail != null) && (eventAuthorEmail.length() == 0)) {
			eventCacheModel.eventAuthorEmail = null;
		}

		eventCacheModel.eventAuthorPhoneNumber = getEventAuthorPhoneNumber();

		String eventAuthorPhoneNumber = eventCacheModel.eventAuthorPhoneNumber;

		if ((eventAuthorPhoneNumber != null) &&
				(eventAuthorPhoneNumber.length() == 0)) {
			eventCacheModel.eventAuthorPhoneNumber = null;
		}

		eventCacheModel.additionalCompanyIds = getAdditionalCompanyIds();

		String additionalCompanyIds = eventCacheModel.additionalCompanyIds;

		if ((additionalCompanyIds != null) &&
				(additionalCompanyIds.length() == 0)) {
			eventCacheModel.additionalCompanyIds = null;
		}

		eventCacheModel.status = getStatus();

		String status = eventCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			eventCacheModel.status = null;
		}

		eventCacheModel.authorizationToken = getAuthorizationToken();

		String authorizationToken = eventCacheModel.authorizationToken;

		if ((authorizationToken != null) && (authorizationToken.length() == 0)) {
			eventCacheModel.authorizationToken = null;
		}

		eventCacheModel.userGivenPassword = getUserGivenPassword();

		String userGivenPassword = eventCacheModel.userGivenPassword;

		if ((userGivenPassword != null) && (userGivenPassword.length() == 0)) {
			eventCacheModel.userGivenPassword = null;
		}

		eventCacheModel.adminComment = getAdminComment();

		String adminComment = eventCacheModel.adminComment;

		if ((adminComment != null) && (adminComment.length() == 0)) {
			eventCacheModel.adminComment = null;
		}

		eventCacheModel.showMap = getShowMap();

		eventCacheModel.updateUrl = getUpdateUrl();

		String updateUrl = eventCacheModel.updateUrl;

		if ((updateUrl != null) && (updateUrl.length() == 0)) {
			eventCacheModel.updateUrl = null;
		}

		eventCacheModel.eventFriendlyName = getEventFriendlyName();

		String eventFriendlyName = eventCacheModel.eventFriendlyName;

		if ((eventFriendlyName != null) && (eventFriendlyName.length() == 0)) {
			eventCacheModel.eventFriendlyName = null;
		}

		eventCacheModel.additionalStartingDates = getAdditionalStartingDates();

		String additionalStartingDates = eventCacheModel.additionalStartingDates;

		if ((additionalStartingDates != null) &&
				(additionalStartingDates.length() == 0)) {
			eventCacheModel.additionalStartingDates = null;
		}

		eventCacheModel.additionalStartingDatesRule = getAdditionalStartingDatesRule();

		String additionalStartingDatesRule = eventCacheModel.additionalStartingDatesRule;

		if ((additionalStartingDatesRule != null) &&
				(additionalStartingDatesRule.length() == 0)) {
			eventCacheModel.additionalStartingDatesRule = null;
		}

		return eventCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(63);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", eventId=");
		sb.append(getEventId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", eventName=");
		sb.append(getEventName());
		sb.append(", startingDate=");
		sb.append(getStartingDate());
		sb.append(", endingDate=");
		sb.append(getEndingDate());
		sb.append(", timesAdditionalInfo=");
		sb.append(getTimesAdditionalInfo());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", imageUrl=");
		sb.append(getImageUrl());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", additionalInformation=");
		sb.append(getAdditionalInformation());
		sb.append(", signUpLink=");
		sb.append(getSignUpLink());
		sb.append(", linkToEventWebPage=");
		sb.append(getLinkToEventWebPage());
		sb.append(", categoryIds=");
		sb.append(getCategoryIds());
		sb.append(", eventAuthorName=");
		sb.append(getEventAuthorName());
		sb.append(", eventAuthorEmail=");
		sb.append(getEventAuthorEmail());
		sb.append(", eventAuthorPhoneNumber=");
		sb.append(getEventAuthorPhoneNumber());
		sb.append(", additionalCompanyIds=");
		sb.append(getAdditionalCompanyIds());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", authorizationToken=");
		sb.append(getAuthorizationToken());
		sb.append(", userGivenPassword=");
		sb.append(getUserGivenPassword());
		sb.append(", adminComment=");
		sb.append(getAdminComment());
		sb.append(", showMap=");
		sb.append(getShowMap());
		sb.append(", updateUrl=");
		sb.append(getUpdateUrl());
		sb.append(", eventFriendlyName=");
		sb.append(getEventFriendlyName());
		sb.append(", additionalStartingDates=");
		sb.append(getAdditionalStartingDates());
		sb.append(", additionalStartingDatesRule=");
		sb.append(getAdditionalStartingDatesRule());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(97);

		sb.append("<model><model-name>");
		sb.append("fi.valamis.maakportal2.calendar.event.model.Event");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventName</column-name><column-value><![CDATA[");
		sb.append(getEventName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startingDate</column-name><column-value><![CDATA[");
		sb.append(getStartingDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endingDate</column-name><column-value><![CDATA[");
		sb.append(getEndingDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timesAdditionalInfo</column-name><column-value><![CDATA[");
		sb.append(getTimesAdditionalInfo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageUrl</column-name><column-value><![CDATA[");
		sb.append(getImageUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>additionalInformation</column-name><column-value><![CDATA[");
		sb.append(getAdditionalInformation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signUpLink</column-name><column-value><![CDATA[");
		sb.append(getSignUpLink());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linkToEventWebPage</column-name><column-value><![CDATA[");
		sb.append(getLinkToEventWebPage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryIds</column-name><column-value><![CDATA[");
		sb.append(getCategoryIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventAuthorName</column-name><column-value><![CDATA[");
		sb.append(getEventAuthorName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventAuthorEmail</column-name><column-value><![CDATA[");
		sb.append(getEventAuthorEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventAuthorPhoneNumber</column-name><column-value><![CDATA[");
		sb.append(getEventAuthorPhoneNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>additionalCompanyIds</column-name><column-value><![CDATA[");
		sb.append(getAdditionalCompanyIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authorizationToken</column-name><column-value><![CDATA[");
		sb.append(getAuthorizationToken());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userGivenPassword</column-name><column-value><![CDATA[");
		sb.append(getUserGivenPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>adminComment</column-name><column-value><![CDATA[");
		sb.append(getAdminComment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>showMap</column-name><column-value><![CDATA[");
		sb.append(getShowMap());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateUrl</column-name><column-value><![CDATA[");
		sb.append(getUpdateUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventFriendlyName</column-name><column-value><![CDATA[");
		sb.append(getEventFriendlyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>additionalStartingDates</column-name><column-value><![CDATA[");
		sb.append(getAdditionalStartingDates());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>additionalStartingDatesRule</column-name><column-value><![CDATA[");
		sb.append(getAdditionalStartingDatesRule());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Event.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Event.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _eventId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _eventName;
	private Date _startingDate;
	private Date _originalStartingDate;
	private Date _endingDate;
	private Date _originalEndingDate;
	private String _timesAdditionalInfo;
	private String _location;
	private String _address;
	private String _imageUrl;
	private String _description;
	private String _additionalInformation;
	private String _signUpLink;
	private String _linkToEventWebPage;
	private String _categoryIds;
	private String _eventAuthorName;
	private String _eventAuthorEmail;
	private String _eventAuthorPhoneNumber;
	private String _additionalCompanyIds;
	private String _status;
	private String _originalStatus;
	private String _authorizationToken;
	private String _userGivenPassword;
	private String _adminComment;
	private boolean _showMap;
	private String _updateUrl;
	private String _eventFriendlyName;
	private String _originalEventFriendlyName;
	private String _additionalStartingDates;
	private String _additionalStartingDatesRule;
	private long _columnBitmask;
	private Event _escapedModel;
}